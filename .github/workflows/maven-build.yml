# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  workflow_dispatch:
    inputs:
      username:
        description: 'A username passed from the caller workflow'
        default: 'pedro-fernandez'
        required: false
        type: string

  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

env:
  IMAGE_NAME: achievement-unlocked-liberica/espresso-achievement
  GHA_PAT_REGISTRY_PUSH: ${{ secrets.GHA_PAT_REGISTRY_PUSH }}
#
jobs:
  # This pushes the image to GitHub Packages.
  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Step - Build Image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
        #
      - name: Step - Log In to GitHub Container Registry

        run: echo "${{ env.GHA_PAT_REGISTRY_PUSH }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        #
      - name: Step - Push Image to GitHub Container Registry
        run: |
          # Set the GitHub Container Registry image name.
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase characters to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Remove the git ref prefix from the version.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Remove the "v" prefix from the tag name.
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # This uses the Docker `latest` tag convention.
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          # Tag the docker image witht he image name and version
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION

          # Push the image to the GitHub Container Registry
          docker push $IMAGE_ID:$VERSION









  # build:

  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up JDK 21
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '21'
  #       distribution: 'temurin'
  #       cache: maven

  #   - name: Build with Maven
  #     run: mvn -DskipTest -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    # - name: Update dependency graph
    #   uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
