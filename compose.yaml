# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3.9'
name: espresso
services:
  espresso-liberica:
    # image: ghcr.io/achievement-unlocked-liberica/espresso-achievement:latest
    container_name: achievement-liberica
    build:
      context: .
    ports:
      - 5050:5050
    depends_on:
      - mongo-liberica
      - azblob-liberica


  mongo-liberica:
    container_name: mongodb-liberica
    image: bitnami/mongodb:latest
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongousr
      MONGO_INITDB_ROOT_PASSWORD: mongopwd
      MONGO_INITDB_DATABASE: admin
    volumes:
      - mongodb_data_container:/data/db

  azblob-liberica:
    container_name: azblob-liberica
    image: mcr.microsoft.com/azure-storage/azurite
    hostname: azblob-liberica
    restart: always
    environment:
      - AZURITE_ACCOUNTS=azblobliberica:4cXiMYiuzHhb-Pw33jLGhbTrVVQ360KaS39Rc4_JhgE:mFFoBcujpJXDRZFvZV_XCnkH0r4P9vDYrglTSm8rNCM
    volumes:
      - azblob_data_container:/azblob
    ports:
      - 10000:10000
      - 10001:10001
      - 10002:10002


volumes:
  mongodb_data_container:
    driver: local
  azblob_data_container:
    driver: local

# DefaultEndpointsProtocol=http;AccountName=azblobliberica;AccountKey=4cXiMYiuzHhb-Pw33jLGhbTrVVQ360KaS39Rc4_JhgE;BlobEndpoint=http://127.0.0.1:10000/azblobliberica;

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

